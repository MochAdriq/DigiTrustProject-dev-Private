// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  type          String   // "private" or "sharing"
  profiles      Json     // Array of Profile objects
  createdAt     DateTime @default(now()) @map("created_at")
  expiresAt     DateTime @map("expires_at")
  reported      Boolean  @default(false)
  reportReason  String?  @map("report_reason")
  isGaransiOnly Boolean  @default(false) @map("is_garansi_only")

  // Relations
  reportedAccounts ReportedAccount[]
  customerAssignments CustomerAssignment[]

  @@map("accounts")
}

model GaransiAccount {
  id           String   @id @default(cuid())
  email        String
  password     String
  type         String   // "private" or "sharing"
  profiles     Json     // Array of Profile objects
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  warrantyDate DateTime @map("warranty_date")

  @@map("garansi_accounts")
}

model ReportedAccount {
  id           String   @id @default(cuid())
  accountId    String   @map("account_id")
  email        String
  reportReason String   @map("report_reason")
  reportedAt   DateTime @default(now()) @map("reported_at")
  resolved     Boolean  @default(false)

  // Relations
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("reported_accounts")
}

model CustomerAssignment {
  id                 String   @id @default(cuid())
  customerIdentifier String   @map("customer_identifier")
  accountId          String   @map("account_id")
  accountEmail       String   @map("account_email")
  accountType        String   @map("account_type")
  profileName        String   @map("profile_name")
  operatorName       String?  @map("operator_name")
  assignedAt         DateTime @default(now()) @map("assigned_at")

  // Relations
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("customer_assignments")
}

model OperatorActivity {
  id           String   @id @default(cuid())
  operatorName String   @map("operator_name")
  action       String
  accountEmail String   @map("account_email")
  accountType  String   @map("account_type")
  date         DateTime @default(now())

  @@map("operator_activities")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      String   @default("operator") // "admin" or "operator"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}
